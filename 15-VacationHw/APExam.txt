1 C
2 A
3 B
4 C
5 C
6 E
7 D
8 C
9 B
10B
11B
12E C
13E B
14E
15A
16D
17C
18B
19B
20E
21D
22D 
23E
24E D
25B A
26A
27E D
28E
29E
30D C
31C
32C
33E
34B
35E
36C
37D
38D A
39A D
40A C

Short Response

1a

private String recombine(String word1, String word2){
	String tmp1 = word1.subString(0, word1.length() / 2);
	String tmp2 = word2.subString(word2.length() / 2, word2.length());
	return tmp1 + tmp2;
}

1b

private String[] mixedWords(String[] words){
	String[] ans = new String[words.length];
	for(int i = 0; i < (words.length / 2); i++){
		ans[2*i] = recombine(words[i*2],words[i*2 + 1]);
		ans[2*i + 1] = recombine(words[i*2 + 1],words[i*2]);
	}
	return ans;
}

2a
 
public static int getPeakIndex(int[] array) {
       for(int i = 1; i < array.length - 1; i++){
       	       if(array[i] > array[i-1] && array[i] > array[i+1]){
	       		   return i;
		}
	}
	return -1;
}

2b

public static boolean isMountain(int[] array){
       int peak = getPeakIndex(array);
       if(peak == -1){
       	       return false;
	}      
	return (isIncreasing(array, peak) && isDecreasing(array, peak));
}

3a

public int getRandomDirection(){
       int temp = (int)(Math.random() * 8);
       if(temp == 0)
       	       return North;
	if(temp == 1)
	return NorthEast;
	ir(temp == 2)
	return East;
	if(temp == 3)
	return SouthEast;
	if(temp == 4)
	return South;
	if(temp == 5)
	return SouthWest;
	if(temp == 6)
	return West;
	else
	return NorthWest;
}

3b

public ArrayList<Location> getMoveLocations() {
}

3c
GridWorld For Later

4a

public boolean record(int score) {
       for(int i = 0; i < scoreList.size(); i++){
       	       if(scoreList.get(i).getScore() == score){
	       	    scoreList.get(i).increment();
		    return false;
		    }
	}
	for(int i = 0; i < scoreList.size(); i++){
		if(score > scoreList.get(i).getScore()){
			 scoreList.add(score, i + 1);
			 break;
		}
	}
	return true;
}

4b

public void recordScores(int[] score){
       for (int i = 0; i <score.length; i++){
       	   record(score[i]);
	}
}
